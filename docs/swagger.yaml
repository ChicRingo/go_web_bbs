basePath: /api/v1
definitions:
  controller.ResponseData:
    properties:
      code:
        example: 1000
        type: integer
      data:
        type: object
      msg:
        type: object
    type: object
  models.ParamLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.ParamSingUp:
    properties:
      password:
        type: string
      re_password:
        type: string
      username:
        type: string
    required:
    - password
    - re_password
    - username
    type: object
  models.Post:
    properties:
      author_id:
        type: integer
      community_id:
        type: integer
      content:
        type: string
      create_time:
        type: string
      post_id:
        example: "0"
        type: string
      status:
        type: integer
      title:
        type: string
    required:
    - community_id
    - content
    - title
    type: object
host: localhost:8080
info:
  contact:
    email: test@qq.com
    name: 百度不会吗？嗯？看什么看？
    url: http://www.baidu.com
  description: 这是一个gin+sqlx+viper+swag的bbs demo
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: go_web_bbs API
  version: 0.0.1
paths:
  /community:
    get:
      description: 查询到所有的社区（community_id, community_name）以列表形式返回
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1006":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: 社区列表
      tags:
      - community
  /community/{id}:
    get:
      consumes:
      - application/json
      description: 根据id获取社区详情
      parameters:
      - description: 社区ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1001":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1006":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: 社区分类详情
      tags:
      - community
  /login:
    post:
      consumes:
      - application/json
      description: 根据传递进来的用户名和密码进行校验，通过后创建新用户
      parameters:
      - description: 用户登陆请求
        in: body
        name: paramLogin
        required: true
        schema:
          $ref: '#/definitions/models.ParamLogin'
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1001":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1003":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: 用户登录
      tags:
      - user
  /post:
    post:
      consumes:
      - application/json
      description: 根据get请求参数创建帖子
      parameters:
      - description: 提交文章对象
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1001":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1006":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: 创建帖子
      tags:
      - post
  /post/{id}:
    get:
      consumes:
      - application/json
      description: 根据id获取帖子详情
      parameters:
      - description: post_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1001":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1006":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: 帖子详情
      tags:
      - post
  /posts1:
    get:
      consumes:
      - application/json
      description: 获取全部帖子列表
      parameters:
      - description: 分页页码
        in: query
        name: page
        required: true
        type: integer
      - description: 每页数量
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: 帖子列表
      tags:
      - post
  /posts2:
    get:
      consumes:
      - application/json
      description: 根据前端参数动态获取全部帖子列表，按 时间 或 分数 排序
      parameters:
      - description: 分页页码
        in: query
        name: page
        required: true
        type: integer
      - description: 每页数量
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: 帖子列表
      tags:
      - post
  /signup:
    post:
      consumes:
      - application/json
      description: 根据传递进来的用户名和密码进行校验，通过后创建新用户
      parameters:
      - description: 用户注册请求
        in: body
        name: paramSingUp
        required: true
        schema:
          $ref: '#/definitions/models.ParamSingUp'
      produces:
      - application/json
      responses:
        "1000":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1001":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1002":
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "1005":
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: 新建用户
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
